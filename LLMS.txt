# just-mcp: Justfile-to-MCP Tool Bridge (Minimal Edition)


## Project Overview
This package exposes Justfile recipes as Model Context Protocol (MCP) tools, allowing AI assistants and automation systems to discover and execute project tasks. It parses a Justfile, generates tool metadata, and runs Just recipes with argument handling and error reporting. The focus is on simplicity: a single script, minimal dependencies, and clear integration tests.


## Key Features
- Parses Justfile(s) to enumerate all available recipes, their parameters, and descriptions
- Dynamically generates MCP tool definitions for each recipe
- Executes Just recipes with argument validation and formatted output
- Cross-platform: works on Windows, macOS, and Linux


## Toolchain & Structure
- Language: Typescript (Node.js >=18)
- Testing: Vitest
- Directory: All code and tests in `src/` or project root
- CI/CD: Github Actions for running tests and deploying to npm.
- Project automation uses a Justfile (not package.json scripts).
- CLI is option-based (not subcommand-based): `just-mcp [--justfile <path>] [--just-binary <path>] [--list-tools] [--help]`.
- MCP server is the primary use case; integration tests use the MCP protocol.
- Minimal dependencies, KISS, all logic in a single script or a few files.


## Testing Approach
- Integration tests only. Each test uses a sample Justfile and starts the MCP server as a subprocess.
- Tests use an MCP client library to connect, list tools, and invoke tools via the MCP protocol.
- Error handling is tested by starting the server with a bad Justfile and asserting stderr and exit code.
- No mocks or coverage required unless desired.
- No feature files; tests are simple, readable, and integration-focused.


## Tool Generation Details
Only tools corresponding to recipes found in the Justfile are generated. Each tool is named `just_<recipe_name>` (dashes replaced with underscores). No other tools are available.


## Description Parsing
The tool description is parsed from the comment string in the output of `just --list`. For each recipe, the text after the `#` is used as the tool's description. If no comment is present, a default description is generated (e.g., "Execute the <recipe> recipe").


## Usage

You can run the tool directly with npx (assuming the package is published as `just-mcp`):

```sh
npx just-mcp
```

You can optionally specify the justfile and the location of the just binary:

```sh
npx just-mcp --justfile ./llm-actions.just --just-binary "C:/path/to/just"
```

### CLI Options

- `--justfile <path>`: Path to Justfile (default: `Justfile`)
- `--just-binary <path>`: Path to just binary (default: `just`)
- `--list-tools`: Print available tools and exit (diagnostic only)
- `--help`: Show help message

If no options are given, starts the MCP server and prints available tools.

## Development

A justfile is provided for running common commands. E.g. build & run tests with:

```sh
just test
```

## Example Test Cases

Below are example test cases used in integration testing. Each case shows the Justfile content under test and the expected MCP tools generated.

---

### 1. Simple Justfile

**Justfile:**
```makefile
# simple.justfile
build target:
    echo "Building for {{target}}"

deploy env version:
    echo "Deploying {{version}} to {{env}}"
```

**Expected tools:**
- `just_build` (input: `{ "target": string }`, output: "Building for \<target\>")
- `just_deploy` (input: `{ "env": string, "version": string }`, output: "Deploying \<version\> to \<env\>")

---

### 2. No Parameters

**Justfile:**
```makefile
# no_params.justfile
test:
    echo "Running tests"
```

**Expected tools:**
- `just_test` (input: `{}`, output: "Running tests")

---

### 3. No Description

**Justfile:**
```makefile
# no_description.justfile
hello name:
    echo "Hello {{name}}!"
```

**Expected tools:**
- `just_hello` (input: `{ "name": string }`, output: "Hello \<name\>!")

---

### 4. Malformed Justfile

**Justfile:**
```makefile
# malformed.justfile
this is not valid just syntax
```

**Expected:**
- Startup error, no tools registered.

---

### 5. Large Output

**Justfile:**
```makefile
# large_output.justfile
spam:
    yes | head -n 1000
```

**Expected tools:**
- `just_spam` (input: `{}`, output contains: "yes")

---

### 6. Failing Recipe

**Justfile:**
```makefile
# fail.justfile
fail:
    exit 1
```

**Expected tools:**
- `just_fail` (input: `{}`, output contains: "exit code: 1")

---

### 7. Polyglot Example

**Justfile:**
```makefile
# polyglot.just
js:
    node -e "console.log('Greetings from JavaScript!')"
```

**Expected tools:**
- `just_js` (input: `{}`, output contains: "Greetings from JavaScript!")

---

These cases are used to verify correct parsing, tool generation, argument handling, error reporting, and output formatting.

## License

MIT